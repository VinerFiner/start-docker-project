edition: 1.0.0          #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: functionApp       #  项目名称
access: "{{ access }}"  #  秘钥别名

vars:
  region: "{{ region }}" 
  service:
    name: "{{ serviceName }}"
    description: 'project by Serverless Devs'
    # nasConfig: auto
  functionName: "{{ functionName }}"
  environmentVariables:     #  为函数配置环境变量
    App_Version: "0.0.1"
  # image: ${env(imageurl)}
  image: '{{ acrRegistry }}'

services:
  # 初始化 nas
  fc-nas-init:
    component: fc
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "nas-init"
        description: 'Prepare nas'
        codeUri: './code/nas-init'
        runtime: python3.9
        timeout: 1200
        memorySize: 1024
        cpu: 1.0
        diskSize: 512
        instanceConcurrency: 1
        handler: index.handler
  # 项目
  project-function: #  服务名称
    component: fc # 组件名称，
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      pre-deploy: # 在deploy之前运行
        - component: fc build --use-docker --dockerfile ./code/project/Dockerfile --context ./code/project
      # post-deploy: # 初始化 nas
      #   - component: fc invoke --service-name ${fc-nas-init.output.service.name} --function-name nas-init
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.functionName} # 函数名
        description: 'project  Function'
        timeout: 60
        memorySize: 128
        cpu: 0.1
        diskSize: 512
        instanceConcurrency: 12
        caPort: 80
        environmentVariables: ${vars.environmentVariables}  #  为函数配置环境变量
        runtime: custom-container
        customContainerConfig:
          image: ${vars.image}
        codeUri: './code/project'
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
# 预热
  keep-warm: # 辅助函数, 2 min 定时预热
    component: fc # 组件名称
    actions:
      post-deploy:
        - component: fc invoke
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: keep-warm
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './code/keep-warm'
        handler: index.handler
        runtime: python3
        timeout: 120
        memorySize: 128
        cpu: 0.1
        diskSize: 512
        instanceConcurrency: 1
        environmentVariables:
          KEEP_WARM_URL: ${project-function.output.url.system_url}
      triggers:
        - name: timerTrigger
          type: timer
          # qualifier: LATEST    
          config:
            payload: '{}'
            cronExpression: '@every 2m'
            enable: false
#END